#!/bin/bash

# Playbook Web Pentest Automatis√© - Mode menu interactif
# Par un futur Ethical Hacker :)

# V√©rifie la pr√©sence de jq pour format JSON si besoin
command -v jq >/dev/null 2>&1 || { echo >&2 "Le paquet jq est requis pour l'option --json."; }

# Variables globales
DOMAIN=""
OUTPUT_DIR="results"
OUTPUT_FILE=""
LITE_MODE=false

# Outils √† v√©rifier
TOOLS=("nmap" "sslscan" "whatweb" "dirb" "nikto" "amass" "sublist3r" "theharvester" "finalrecon")

# Cr√©e le dossier de r√©sultats
mkdir -p "$OUTPUT_DIR"

# V√©rifie si un outil est install√©
check_tool() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  $1 n'est pas install√©. Scan ignor√©."
        return 1
    fi
    return 0
}

# Ajoute un en-t√™te au fichier
append_header() {
    echo "=========================================" >> "$OUTPUT_FILE"
    echo "R√©sultat $1 pour $DOMAIN" >> "$OUTPUT_FILE"
    echo "=========================================" >> "$OUTPUT_FILE"
}

# Analyse post-scan automatique
post_scan_analysis() {
    echo "üîç Post-analyse automatique des r√©sultats..."
    echo "---- Ports sensibles trouv√©s : ----" >> "$OUTPUT_FILE"
    grep -Ei "22/tcp|21/tcp|23/tcp|3389/tcp" "$OUTPUT_FILE" > temp_ports.txt
    cat temp_ports.txt >> "$OUTPUT_FILE"
    rm -f temp_ports.txt

    echo "---- R√©f√©rences CVE d√©tect√©es : ----" >> "$OUTPUT_FILE"
    grep -E "CVE-[0-9]{4}-[0-9]{4,7}" "$OUTPUT_FILE" > temp_cves.txt
    cat temp_cves.txt >> "$OUTPUT_FILE"
    rm -f temp_cves.txt
}

# Fonctions scan
scan_nmap() {
    if check_tool "nmap"; then
        echo "‚ñ∂Ô∏è  Lancement de Nmap..."
        append_header "Nmap"
        nmap -sV --script vulners --script-args mincvss=5.0 -T3 "$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse Nmap termin√©e."
    fi
}

scan_sslscan() {
    if check_tool "sslscan"; then
        echo "‚ñ∂Ô∏è  Lancement de SSLScan..."
        append_header "SSLScan"
        sslscan "$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse SSLScan termin√©e."
    fi
}

scan_whatweb() {
    if check_tool "whatweb"; then
        echo "‚ñ∂Ô∏è  Lancement de WhatWeb..."
        append_header "WhatWeb"
        whatweb "$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse WhatWeb termin√©e."
    fi
}

scan_dirb() {
    if check_tool "dirb"; then
        echo "‚ñ∂Ô∏è  Lancement de Dirb..."
        append_header "Dirb"

        if [ "$LITE_MODE" = true ]; then
            TEMP_WORDLIST="/tmp/dirb_small.txt"
            if [ ! -f "$TEMP_WORDLIST" ]; then
                echo "üì• T√©l√©chargement de la wordlist l√©g√®re pour Dirb..."
                curl -s -L -o "$TEMP_WORDLIST" "https://raw.githubusercontent.com/v0re/dirb/refs/heads/master/wordlists/small.txt"
            fi
            dirb "http://$DOMAIN" "$TEMP_WORDLIST" | tee -a "$OUTPUT_FILE"
        else
            dirb "http://$DOMAIN" /usr/share/dirb/wordlists/big.txt | tee -a "$OUTPUT_FILE"
        fi

        echo "‚úÖ Analyse Dirb termin√©e."
    fi
}

scan_nikto() {
    if check_tool "nikto"; then
        echo "‚ñ∂Ô∏è  Lancement de Nikto..."
        append_header "Nikto"
        nikto -h "$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse Nikto termin√©e."
    fi
}

scan_amass() {
    if check_tool "amass"; then
        echo "‚ñ∂Ô∏è  Lancement de Amass..."
        append_header "Amass"
        if [ "$LITE_MODE" = true ]; then
            timeout 60s amass enum -passive -src -d "$DOMAIN" | tee -a "$OUTPUT_FILE"
        else
            amass enum -d "$DOMAIN" | tee -a "$OUTPUT_FILE"
        fi
        echo "‚úÖ Analyse Amass termin√©e."
    fi
}

scan_sublist3r() {
    if check_tool "sublist3r"; then
        echo "‚ñ∂Ô∏è  Lancement de Sublist3r..."
        append_header "Sublist3r"
        sublist3r -d "$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse Sublist3r termin√©e."
    fi
}

scan_theharvester() {
    if check_tool "theharvester"; then
        echo "‚ñ∂Ô∏è  Lancement de theHarvester..."
        append_header "theHarvester"
        theharvester -d "$DOMAIN" -b all | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse theHarvester termin√©e."
    fi
}

scan_finalrecon() {
    if check_tool "finalrecon"; then
        echo "‚ñ∂Ô∏è  Lancement de FinalRecon..."
        append_header "FinalRecon"
        finalrecon --full "http://$DOMAIN" | tee -a "$OUTPUT_FILE"
        echo "‚úÖ Analyse FinalRecon termin√©e."
    fi
}

# Menu de s√©lection
show_menu() {
    echo "S√©lectionnez un scan √† effectuer pour $DOMAIN :"
    echo "1) Scan complet (ALL)"
    echo "2) Scan l√©ger (--lite)"
    echo "3) Scan manuel (s√©lectionner les outils)"
    read -rp "Votre choix [1-3]: " choice

    case $choice in
        1) run_all_scans ;;
        2) LITE_MODE=true; run_lite_scans ;;
        3) manual_scan_menu ;;
        *) echo "Option invalide"; exit 1 ;;
    esac
}

run_all_scans() {
    echo "üü¢ D√©marrage du scan complet..."
    scan_nmap
    scan_sslscan
    scan_whatweb
    scan_dirb
    scan_nikto
    scan_amass
    scan_theharvester
    scan_finalrecon
    post_scan_analysis
}

run_lite_scans() {
    echo "üü° Mode LITE activ√© : Scan rapide (Nmap, WhatWeb, Dirb, Sublist3r)"
    scan_nmap
    scan_whatweb
    scan_dirb
    scan_sublist3r
    post_scan_analysis
}

manual_scan_menu() {
    for tool in "${TOOLS[@]}"; do
        read -rp "Voulez-vous lancer $tool ? (y/n): " answer
        if [[ "$answer" =~ ^[Yy]$ ]]; then
            "scan_$tool"
        fi
    done
    post_scan_analysis
}

# ----- Point d‚Äôentr√©e -----
if [ $# -lt 1 ]; then
    echo "Usage: $0 <domaine>"
    exit 1
fi

DOMAIN="$1"
DATE=$(date +%Y-%m-%d_%H-%M)
OUTPUT_FILE="$OUTPUT_DIR/${DOMAIN}_${DATE}_scan.txt"

echo "üß∞ D√©marrage du playbook sur $DOMAIN"
show_menu
echo "üìÑ Rapport complet : $OUTPUT_FILE"
